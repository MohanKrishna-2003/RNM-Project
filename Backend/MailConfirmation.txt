
### Step 1: Add the Email Dependency

In your `pom.xml` file, add the Spring Boot Starter Mail dependency:

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-mail</artifactId>
</dependency>
```

---

### Step 2: Configure Email Settings

In your `application.properties` file, configure your email SMTP settings. For Gmail, the configuration is as follows:

```properties
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=your-email@gmail.com
spring.mail.password=your-app-password
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
```

> ðŸ”’ Important: Use an App Password if you're using Gmail. Create it via [Google Account Security Settings](https://myaccount.google.com/security) under "App Passwords."

---

### Step 3: Create the Email Service

This service will handle the logic for sending emails.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.Random;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    public String sendOtp(String toEmail) {
        // Generate a random OTP
        String otp = String.valueOf(new Random().nextInt(999999));

        // Prepare email content
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(toEmail);
        message.setSubject("Your OTP Code");
        message.setText("Your OTP for confirmation is: " + otp);

        // Send email
        mailSender.send(message);

        return otp; // Return the OTP for verification purposes
    }
}
```

---

### Step 4: Create a Controller

Add a controller to handle user requests for OTP.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.;

@RestController
@RequestMapping("/api/email")
public class EmailController {

    @Autowired
    private EmailService emailService;

    @PostMapping("/send-otp")
    public String sendOtp(@RequestParam String email) {
        String otp = emailService.sendOtp(email);
        return "OTP sent successfully to " + email + ". Your OTP: " + otp; // For development purposes
    }
}
```

---

### Step 5: Create a Test Endpoint (Optional)

Use a tool like Postman or a frontend form to test the `/send-otp` endpoint:

- URL: `http://localhost:8080/api/email/send-otp`
- Method: `POST`
- Body: `email=recipient-email@example.com`

---

### Step 6: Verify the OTP

Add functionality to verify the OTP entered by the user.

```java
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class OtpService {

    private Map<String, String> otpStorage = new HashMap<>();

    public void saveOtp(String email, String otp) {
        otpStorage.put(email, otp);
    }

    public boolean verifyOtp(String email, String inputOtp) {
        String generatedOtp = otpStorage.get(email);
        return generatedOtp != null && generatedOtp.equals(inputOtp);
    }
}
```

Update the `EmailService` to save OTPs:

```java
@Autowired
private OtpService otpService;

public String sendOtp(String toEmail) {
    String otp = String.valueOf(new Random().nextInt(999999));
    otpService.saveOtp(toEmail, otp);
    ...
}
```

Add a new endpoint in `EmailController` to verify OTP:

```java
@PostMapping("/verify-otp")
public String verifyOtp(@RequestParam String email, @RequestParam String otp) {
    boolean isValid = otpService.verifyOtp(email, otp);
    return isValid ? "OTP Verified Successfully!" : "Invalid OTP!";
}
```

---

### Frontend Integration

1. Create a form for the user to enter their email and request an OTP.
2. Create another form to enter the received OTP and verify it.
3. Use Angular HTTP services to interact with the Spring Boot APIs.

---

### Testing the Workflow

1. Start the Spring Boot application.
2. Test the `/send-otp` endpoint to receive an OTP on the provided email.
3. Test the `/verify-otp` endpoint with the generated OTP.

---

### Next Steps

1. Enhance Security: Encrypt OTP storage and set expiration times.
2. Styling: Add a beautiful UI using Angular Material or Bootstrap.
3. Error Handling: Handle invalid email inputs or mail delivery failures gracefully.
