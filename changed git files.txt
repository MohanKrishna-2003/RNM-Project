import { HttpClient } from '@angular/common/http';
import { Injectable, OnInit } from '@angular/core';
import { catchError, tap } from 'rxjs/operators';
import { forkJoin, Observable, of } from 'rxjs';
import { formatDate } from '@angular/common';

interface Center {
  id: string;
  name: string;
  location: string;
  availableSlots: number;
  morningSlots: number;
  afternoonSlots: number;
  eveningSlots: number;
  latitude: number;
  longitude: number;
  icon:String;
}

@Injectable({
  providedIn: 'root'
})
export class CommonDataServiceService  {

  CenterDetails: Center[] = [];
  maindata: any=[];
  constructor(private http: HttpClient) {}
  totalcentres: number;
  totalusers: number;
  userdata: any;
  userwithfeedbacks : any=[];
  users: any[] = [];
  feedbacks : any=[];
  bookings : any[]=[];
  
  loadData(): Observable<any> {
    if (this.maindata.length == 0 || this.userwithfeedbacks.length == 0) {
      console.log('NO DATA EXISTS');
      return new Observable((subscriber) => {
        // this.getCenterDetails()
       forkJoin([
        this.http.get('http://localhost:8080/api/slot-bookings') ,
        this.http.get('http://localhost:8080/user/with-feedback')
             ])
          .subscribe((d)=>{
              console.log("DATA IS PRESENT");
              
              console.log(this.maindata);
              
              this.maindata = d[0];
              this.userwithfeedbacks = d[1];
              subscriber.next();
              subscriber.complete();
            }
          );
      });
    } else {
      console.log("DATA FOUND");
      
      return of("");
    }
  }

  // getCenterDetails(): Observable<any> {
  //   this.maindata= this.http.get<any>('http://localhost:8080/api/slot-bookings');
  //   return this.maindata;
  // }

  // getUserandFeedback(): Observable<any> {
  //   this.userwithfeedbacks= this.http.get<any>('http://localhost:8080/user/with-feedback');
  //   return this.userwithfeedbacks;
  // }

  // getUsers(): Observable<any> {
  //   this.userdata= this.http.get<any>('http://localhost:8080/api/slot-bookings');
  //   return this.maindata;
  // }
  // Method to extract and return unique center details

  getFilteredCenterDetails(data: any): Center[] {
    // Using a Map to ensure uniqueness based on center id
    const uniqueCenters = new Map();

    data.forEach((item: any) => {
      const centerId = item.center.id;

      if (!uniqueCenters.has(centerId)) {
        uniqueCenters.set(centerId, {
          id: item.center.id,
          name: item.center.name,
          location: item.center.location,
          availableSlots: item.center.availableSlots,
          morningSlots: item.center.morningSlots,
          afternoonSlots: item.center.afternoonSlots,
          eveningSlots: item.center.eveningSlots,
          latitude: item.center.latitude,
          longitude: item.center.longitude,
          icon: "https://img.icons8.com/color/48/000000/car.png"
        });
      }
    });
    // Return an array of unique centers
    const uniqueCentersArray = Array.from(uniqueCenters.values());
    console.log(uniqueCentersArray); // For debugging
    this.totalcentres = uniqueCentersArray.length;
    console.log(this.totalcentres);
    return uniqueCentersArray;
  }


  // 
  // getUserDetails(maindata: any): any {
  //   this.users = maindata.map((item: any) => item.user);
  //   this.totalusers= this.users.length;
  //   console.log(this.totalusers);
  //   return this.users;
  // }
  
  getfeedbacks(maindata: any): any {
    // maindata.forEach((item: any) => {
    //   this.feedbacks = this.feedbacks.concat(item.user.feedbacks);
    // });
    this.feedbacks = maindata.map((item: any) => item.feedbacks);
    console.log(this.feedbacks);
    return this.feedbacks;
  }
  
  categorizeFeedbacks(feedbackData: any[]): any {
    const result: any = {};

    feedbackData.forEach(user => {
        // Process each feedback for the user
        user.feedbacks.forEach((feedback: any) => {
            // Get the feedback month-year (e.g. "January 2024", "February 2024")
            const feedbackMonth = formatDate(feedback.feedbackDate, 'MMMM yyyy', 'en-US');

            // Initialize the result object for this month if not already
            if (!result[feedbackMonth]) {
                result[feedbackMonth] = { positive: 0, negative: 0 };
            }

            // Categorize the feedback based on userRatings
            if (feedback.userRatings > 2) {
                result[feedbackMonth].positive++;
            } else {
                result[feedbackMonth].negative++;
            }
        });
    });

    console.log(result);
    return result;
}

getTotalUniqueUsers(feedbackData: any[]): number {
  const uniqueUserIds = new Set(feedbackData.map(user => user.userId));
  return uniqueUserIds.size;
}

getUsersRegisteredCountInLast30Days(feedbackData: any[]): number {
  const today = new Date();  // Get the current date
  const thirtyDaysAgo = new Date(today);  // Clone the current date
  thirtyDaysAgo.setDate(today.getDate() - 30);  // Subtract 30 days

  // Filter and count users whose registrationDate is within the last 30 days
  const usersRegisteredInLast30Days = feedbackData.filter((user: any) => {
    const registrationDate = new Date(user.registrationDate);  // Convert registrationDate to Date object
    return registrationDate >= thirtyDaysAgo && registrationDate <= today;  // Check if within last 30 days
  });

  // Return the count of users
  return usersRegisteredInLast30Days.length;
}

getUsersCountByMonth(feedbackData: any[]): any[] {
  const monthCount: any = {};

  feedbackData.forEach((user: any) => {
    // Get the registration month and year from registrationDate
    const registrationDate = new Date(user.registrationDate);
    const month = registrationDate.toLocaleString('default', { month: 'long' });  // Get the full month name (e.g. "January")
    
    // Initialize the month if it doesn't exist
    if (!monthCount[month]) {
      monthCount[month] = 0;
    }

    // Increment the user count for the respective month
    monthCount[month]++;
  });

  // Convert the monthCount object into the desired format
  const result = Object.keys(monthCount).map(month => ({
    month: month,
    count: monthCount[month]
  }));

  // Sort by month name (optional)
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June', 'July', 
    'August', 'September', 'October', 'November', 'December'
  ];

  return result.sort((a, b) => monthNames.indexOf(a.month) - monthNames.indexOf(b.month));
}

getUsersSlotCountByMonth(feedbackData: any[]): any[] {
  const monthCount: any = {};

  feedbackData.forEach((user: any) => {
    // Extract month and year from the registration date
    const registrationDate = new Date(user.bookingTimeStamp);
    const month = registrationDate.toLocaleString('default', { month: 'long' }); // Get the full month name (e.g. "January")
    
    // Initialize the month if it doesn't exist
    if (!monthCount[month]) {
      monthCount[month] = 0;
    }

    // Increment the user count for the respective month
    monthCount[month]++;
  });

  // Convert the monthCount object into the desired format
  const result = Object.keys(monthCount).map(month => ({
    month: month,
    count: monthCount[month]
  }));

  // Sort the result by month
  const monthNames = [
    'January', 'February', 'March', 'April', 'May', 'June', 'July', 
    'August', 'September', 'October', 'November', 'December'
  ];

  return result.sort((a, b) => monthNames.indexOf(a.month) - monthNames.indexOf(b.month));
}

getCenterAnalysis(data: any[]): any[] {
  const centerCounts: any = {};

  // Iterate through the data to extract the center name and count
  data.forEach(item => {
    const centerName = item.center.name;

    // Increment the center count or initialize it if not already in the object
    if (centerCounts[centerName]) {
      centerCounts[centerName]++;
    } else {
      centerCounts[centerName] = 1;
    }
  });

  // Convert the centerCounts object into an array of objects
  const result = Object.keys(centerCounts).map(center => ({
    centerName: center,
    totalBookings: centerCounts[center]
  }));

  return result;
}
getUniqueCenterCount(data: any[]): number {
  const centerNames = new Set();

  // Iterate through the data and add each center's name to the Set
  data.forEach(item => {
    const centerName = item.center.name;
    centerNames.add(centerName);
  });

  // The size of the Set will give us the unique count of centers
  return centerNames.size;
}

extractUserData(data: any[]): any[] {
  let result: any[] = [];

  data.forEach((user: any) => {
    user.feedbacks.forEach((feedback: any) => {
      result.push({
        userId: user.userId,
        userName : user.userName,
        userEmail: user.userEmail,
        feedback: feedback.feedback
      });
    });
  });

  return result;
}

}









import { Component, OnInit } from '@angular/core';
import { AdminHeaderComponent } from '../admin-header/admin-header.component';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms'; // Import FormsModule
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CommonDataServiceService } from '../common-data-service.service';

@Component({
  selector: 'app-users',
  standalone: true,
  imports: [AdminHeaderComponent, CommonModule, FormsModule],
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {
  searchTerm: string = '';
  users: Array<any> = [];
  filteredUsers: Array<any> = [];
  pageSize: number = 10;  // Number of users per page
  page: number = 0;       // Current page index

  constructor(private http: HttpClient,  private commondata: CommonDataServiceService) {}

  ngOnInit(): void {
    // Get the data when component initializes
    this.commondata.loadData().subscribe((data: any) => {
      this.users = this.commondata.userwithfeedbacks;
      this.filteredUsers = this.users.slice(0, this.pageSize); // Initially load the first 10 users
    });
    // this.commondata.getCenterDetails().subscribe((data: any) => {
    //     this.users = this.commondata.getUserDetails(data);
    //     this.filteredUsers = this.users.slice(0, this.pageSize); // Initially load the first 10 users
    //   });
  }

  // getAllTheUserList(): Observable<any> {
  //   return this.http.get('http://localhost:8080/user/userdata');
  // }

  // Filter users based on the search term
  filterUsers() {
    if (this.searchTerm.trim() === '') {
      // If no search term, reset filtered users to all users
      this.filteredUsers = this.users.slice(0, (this.page + 1) * this.pageSize);
    } else {
      // If there is a search term, filter based on that
      const filtered = this.users.filter((user) =>
        user.name.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
      this.filteredUsers = filtered.slice(0, (this.page + 1) * this.pageSize);
    }
  }

  // Load more users (pagination logic)
  loadMore() {
    this.page++; // Increase the page index
    const startIndex = this.page * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    
    // Load more users if available
    if (startIndex < this.users.length) {
      this.filteredUsers = [...this.filteredUsers, ...this.users.slice(startIndex, endIndex)];
    }
  }
}





import { Component, OnInit } from '@angular/core';
import { AdminHeaderComponent } from '../admin-header/admin-header.component';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { CommonDataServiceService } from '../common-data-service.service';

interface Feedback {
  userId : number,
  userName: string;
  feedback: string;
  userEmail: string;
}

@Component({
  selector: 'app-user-feedback',
  standalone: true,
  imports: [AdminHeaderComponent, CommonModule],
  templateUrl: './user-feedback.component.html',
  styleUrls: ['./user-feedback.component.css']
})
export class UserFeedbackComponent implements OnInit {
  feedbackList: Feedback[] = []; // Holds all feedback
  displayedFeedback: Feedback[] = []; // Holds only the currently displayed feedback
  pageSize: number = 10; // Number of feedbacks to show initially
  currentPage: number = 0; // To keep track of the current page for "Load More"

  constructor(private http: HttpClient,  private commondata: CommonDataServiceService) {}

  ngOnInit(): void {
    this.commondata.loadData().subscribe({
      next: (res) => {
        this.feedbackList = this.commondata.extractUserData(this.commondata.userwithfeedbacks);
        this.displayFeedback(); // Display initial set of feedbacks
        console.log(this.feedbackList);
        
      },
      error: (err) => {
        console.error('Error fetching feedback:', err);
      }
    });
    
    // this.http.get<Feedback[]>("http://localhost:8080/feedback/feedbackchart").subscribe({
    //   next: (res) => {
    //     console.log(res);
    //     this.feedbackList = res;
    //     this.displayFeedback(); // Display initial set of feedbacks
    //   },
    //   error: (err) => {
    //     console.error('Error fetching feedback:', err);
    //   }
    // });
  }

  // Display feedback for the current page
  displayFeedback(): void {
    const startIndex = this.currentPage * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    this.displayedFeedback = this.feedbackList.slice(0, endIndex);
  }

  // Load more feedback when the button is clicked
  loadMore(): void {
    this.currentPage++;
    this.displayFeedback();
  }

  // Delete feedback
  deleteFeedback(feedback: Feedback): void {
    if (confirm(`Are you sure you want to delete feedback from ${feedback.userName}?`)) {
      this.feedbackList = this.feedbackList.filter((f) => f !== feedback);
      this.displayFeedback(); // Update the displayed feedback list
    }
  }

  // Get background class for notifications
  getBackgroundClass(index: number): string {
    const classes = ['orange-bg', 'green-bg', 'blue-bg', 'yellow-bg'];
    return classes[index % classes.length];
  }
}








<app-admin-header></app-admin-header>
<div class="container mt-4" id="feedback">
  <!-- Page Header -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2>User Feedback</h2>
  </div>
  <br>

  <!-- Feedback Cards -->
  <div class="card-style">
    <div *ngFor="let feedback of displayedFeedback; let i = index" class="single-notification">
      <div class="notification">
        <div class="image info-bg" id="bgimg" [ngClass]="getBackgroundClass(i)">
          <span>{{ feedback.userName.charAt(0) }}</span> <!-- First letter of user -->
        </div>
        <a href="#0" class="content">
          <h6>{{ feedback.userName }}</h6>
          <p class="text-sm text-gray">{{ feedback.feedback }}</p>
          <span class="text-sm text-medium text-gray">{{ feedback.userEmail }}</span>
        </a>
      </div>
      <div class="action">
        <button class="delete-btn" (click)="deleteFeedback(feedback)">
          <i class="lni lni-trash-can"></i>
        </button>
        <button class="more-btn dropdown-toggle" id="moreAction" data-bs-toggle="dropdown" aria-expanded="false">
          <i class="lni lni-more-alt"></i>
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="moreAction">
          <li class="dropdown-item">
            <a href="#0" class="text-gray">Reply</a>
          </li>
        </ul>
      </div>
    </div>
  </div>
  <!-- End Feedback Cards -->

  <!-- Load More Button -->
  <div class="text-center mt-4">
    <button *ngIf="displayedFeedback.length < feedbackList.length" 
            class="btn btn-primary" 
            (click)="loadMore()">
      Load More
    </button>
  </div>
</div>







import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { AdminHeaderComponent } from '../admin-header/admin-header.component';
import { FormsModule } from '@angular/forms';

interface Contact {
  messageid : number;
  name: string;
  message: string;
  email: string;
  status: boolean;
}

@Component({
  selector: 'app-query',
  imports: [CommonModule,AdminHeaderComponent,AdminHeaderComponent, FormsModule],
  templateUrl: './query.component.html',
  styleUrl: './query.component.css'
})
export class QueryComponent {

  contactList: Contact[] = []; // Holds all feedback
  displayedQuery: Contact[] = []; // Holds only the currently displayed feedback
  pageSize: number = 10; // Number of feedbacks to show initially
  currentPage: number = 0; // To keep track of the current page for "Load More"
  isFormVisible = false;
  email: string = '';
  subject: string = 'Resolving your Query';
  message: string = '';
  selectedmail: String='';
  message_id : number ;
  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.http.get<Contact[]>("http://localhost:8080/contact/contact").subscribe({
      next: (res) => {
        console.log(res);

        this.contactList = res;
          this.displayQuery();
        
         // Display initial set of feedbacks
      },
      error: (err) => {
        console.error('Error fetching feedback:', err);
      }
    });
  }

  // Display feedback for the current page
  displayQuery(): void {
    const startIndex = this.currentPage * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    this.displayedQuery = this.contactList.slice(0, endIndex);
  }

  // Load more feedback when the button is clicked
  loadMore(): void {
    this.currentPage++;
    this.displayQuery();
  }


  // Get background class for notifications
  getBackgroundClass(index: number): string {
    const classes = ['orange-bg', 'green-bg', 'blue-bg', 'yellow-bg'];
    return classes[index % classes.length];
  }

  openForm(email:String, messageid: number) {
    this.isFormVisible = true;
    this.selectedmail=email;
    this.message_id= messageid;
  }

  closeForm() {
    this.isFormVisible = false;
  }
  onSubmit() {
    let data={
      "recipient": this.selectedmail,
      "text":this.message,
      "subject":this.subject
    }

      console.log(this.message_id);
      this.http.post("http://localhost:8080/contact/changestatus",this.message_id).subscribe({
        next: (res) => {
          console.log(res);
        }
      });


      this.http.post("http://localhost:8080/mail/sendmail",data).subscribe({
        next: (res) => {
          console.log(res);
        }
      });

      alert("EMAIL SUCCESFULLY SEND !!")
window.location.reload();
    }
    
}












<app-admin-header></app-admin-header>
<div class="container mt-4" id="contact">
  <!-- Page Header -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2>User Queries</h2>
  </div>
  <br>

  <!-- Feedback Cards -->
   <div *ngFor="let contact of displayedQuery; let i = index" >
    <div *ngIf="contact.status == false" >
      <div class="card-style" *ngIf="contact.status == false">
        <div  class="single-notification">
            <div class="notification">
            <div class="image info-bg" id="bgimg" [ngClass]="getBackgroundClass(i)">
              <span>{{ contact.name.charAt(0) }}</span> <!-- First letter of user -->
            </div>
            <a href="" class="content">
              <h6>{{ contact.name }}</h6>
              <p class="text-sm text-gray">{{ contact.message }}</p>
              <span class="text-sm text-medium text-gray">{{ contact.email }}</span>
            </a>
          </div>
    
          <div class="action" >
           
            <button class="more-btn" id="moreAction"  aria-expanded="false"  (click)="openForm(contact.email, contact.messageid)">
              <i class="bi bi-telegram" style="font-size: 30px;"></i> 
            </button>
          </div>
        </div>
      </div>
    </div>
   </div>
 
  <!-- End Feedback Cards -->

  <!-- Load More Button -->
  <div class="text-center mt-4">
    <button *ngIf="displayedQuery.length < contactList.length" 
            class="btn btn-primary" 
            (click)="loadMore()"
            style="width: 15%;">
      Load More
    </button>
  </div>
</div>

<div class="form-popup" *ngIf="isFormVisible">
  <div class="form-container shadow-lg p-4 rounded"><br>
    <!-- <h2 class="text-center mb-4">Response</h2> -->
    <form (ngSubmit)="onSubmit()" #emailForm="ngForm">
      
      <div class="form-group">
        <label for="email">Recipient Email:</label>
        <input type="email" id="email" [(ngModel)]="email" name="email" class="form-control" required   [(ngModel)]="selectedmail" readonly/>
      </div>

      <div class="form-group">
        <label for="subject">Subject:</label>
        <input type="text" id="subject" [(ngModel)]="subject" name="subject" class="form-control" required />
      </div>

      <div class="form-group">
        <label for="message">Message:</label>
        <textarea id="message" [(ngModel)]="message" name="message" rows="4" class="form-control" required></textarea>
      </div>

      <div class="form-group text-center">
        <button type="submit" class="btn btn-primary mx-2" [disabled]="!message || !subject">Send </button>
        <button type="button" class="btn btn-danger mx-2" (click)="closeForm()">Close</button>
      </div>
    </form>
  </div>
</div>


























  shops: any[] = [];
  ngOnInit() {
    this.commonService.loadData().subscribe(data => {

      // console.log("dataaaa", this.commonService.maindata, this.commonService.userwithfeedbacks);
      
      this.shops = this.commonService.getFilteredCenterDetails(this.commonService.maindata);
      console.log(this.shops);
      
    });
  }

















import { Component, OnInit } from '@angular/core';
import { AdminHeaderComponent } from '../admin-header/admin-header.component';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import Swal from 'sweetalert2';
import { CommonDataServiceService } from '../common-data-service.service';
interface Booking {
  id:number;
  user_id: number;
  name: string;
  selectedCarDetails: string;
  preferredDate: string;
  status: string;
  phone: string;
  email: string;
  address: string;
  timeSlot: string;
  showroomLocation: string;
  bookingTimeStamp: string;
}

@Component({
  selector: 'app-bookings',
  standalone: true,
  imports: [AdminHeaderComponent, CommonModule, FormsModule],
  templateUrl: './bookings.component.html',
  styleUrls: ['./bookings.component.css']
})
export class BookingsComponent implements OnInit {
  searchTerm: string = '';
  bookings: Booking[] = [];
  filteredBookings: Booking[] = [];
  pageSize: number = 10;
  page: number = 0;

  constructor(private http: HttpClient,  private commondata: CommonDataServiceService) {}

  ngOnInit(): void {
    // this.http.get<Booking[]>("http://localhost:8080/api/slot-bookings").subscribe((res) => {
    //   this.bookings = res;
    //   this.filteredBookings = this.bookings.slice(0, this.pageSize);
    // });

    this.commondata.loadData().subscribe((res) => {
      console.log(res);
      console.log("THIS IS FROM SERVICE");
      
      this.bookings = this.commondata.maindata;
      this.filteredBookings = this.bookings.slice(0, this.pageSize);
    });
  }

  filterBookings() {
    if (this.searchTerm.trim() === '') {
      this.filteredBookings = this.bookings.slice(0, (this.page + 1) * this.pageSize);
    } else {
      const filtered = this.bookings.filter((booking) =>
        booking.selectedCarDetails.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
      this.filteredBookings = filtered.slice(0, (this.page + 1) * this.pageSize);
    }
  }

  loadMore() {
    this.page++;
    const startIndex = this.page * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    
    if (startIndex < this.bookings.length) {
      this.filteredBookings = [...this.filteredBookings, ...this.bookings.slice(startIndex, endIndex)];
    }
  }

  viewDetails(booking: Booking): void {
    Swal.fire({
      title: 'Details for booking',
      html: `
        <strong>User Name:</strong> ${booking.name} <br>
        <strong>Car:</strong> ${booking.selectedCarDetails} <br>
        <strong>Date:</strong> ${booking.preferredDate} <br>
        <strong>Status:</strong> ${booking.status} <br>
        <strong>User Phone:</strong> ${booking.phone} <br>
        <strong>Email:</strong> ${booking.email} <br>
        <strong>Address:</strong> ${booking.address} <br>
        <strong>Timeslot:</strong> ${booking.timeSlot} <br>
        <strong>Showroom Location:</strong> ${booking.showroomLocation} <br>
        <strong>Booking Timestamp:</strong> ${booking.bookingTimeStamp}
      `,
      icon: 'info',  // You can customize the icon
      confirmButtonText: 'Close'  // Customize the button text
    });}

  cancelBooking(booking: Booking): void {
   let data={
    "id":booking.id,
    "status":"Cancelled"
    }
    let email = {
      "recipient": booking.email,
      "text": `Dear User,
    
    We regret to inform you that your booking for the test drive on ${booking.preferredDate} has been canceled. We understand this may be disappointing, and we sincerely apologize for any inconvenience this may have caused. 
    
    If you would like to rebook or have any further questions, feel free to reach out to us, and we will be happy to assist you.
    
    Thank you for your understanding.
    
    Best regards,
    The myRNM Team`,
      "subject": "Your Test Drive Booking Has Been Canceled"
    };
    
    if (confirm(`Are you sure you want to cancel this booking?`)) {
      this.http.post("http://localhost:8080/api/slot-bookings/updatestatus",data).subscribe((res) => {
       console.log(res);
       
      });

      this.http.post("http://localhost:8080/mail/sendmail",email).subscribe((res) => {
        console.log(res);
        
       });
      booking.status = 'Cancelled';

    }
  }

  approveBooking(booking: Booking): void {
    let data={
      "id":booking.id,
      "status":"Confirmed"
      }
      let email = {
        "recipient": booking.email,
        "text": `Dear User,
      
      We are excited to confirm that your booking for the test drive on ${booking.preferredDate} has been successfully confirmed! Get ready to experience the drive of your life with the ${booking.selectedCarDetails}. 
      
      Please ensure to arrive at the scheduled time. If you need to make any changes or have any questions, don't hesitate to reach out. 
      
      We look forward to seeing you soon!
      
      Best regards,
      The myRNM Team`,
        "subject": "Your Test Drive Booking is Confirmed!"
      };
      
      this.http.post("http://localhost:8080/api/slot-bookings/updatestatus",data).subscribe((res) => {
        console.log(res);
        
       });
       this.http.post("http://localhost:8080/mail/sendmail",email).subscribe((res) => {
        console.log(res);
        
       });
    booking.status = 'Confirmed';
    console.log('Approved booking:', booking);
  }
  
}





















import { Component, OnInit, AfterViewInit } from '@angular/core';
import { AdminHeaderComponent } from '../admin-header/admin-header.component';
import { Chart, registerables } from 'chart.js';
import { HttpClient } from '@angular/common/http';
// import { log } from 'node:console';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CommonDataServiceService } from '../common-data-service.service';

Chart.register(...registerables);

export interface FeedbackData {
  [month: string]: {
    positive?: number;
    negative?: number;
    neutral?: number;
  };
}

@Component({
  selector: 'app-admin-dashbaord',
  standalone: true,
  imports: [AdminHeaderComponent, FormsModule],
  templateUrl: './admin-dashbaord.component.html',
  styleUrl: './admin-dashbaord.component.css',
})
export class AdminDashbaordComponent implements OnInit {
  constructor(
    private http: HttpClient,
    private commondata: CommonDataServiceService
  ) {}
  totalusers: any;
  usermonthly: any;
  months1: any = [];
  counts: any = [];
  slotusermonthly: any;
  slotmonths: any = [];
  slotcounts: any = [];
  last30: any;
  brandsdata: any;
  brands: any = [];
  showroomcount: any;
  config3: any;
  config: any;
  config2: any;
  config4: any;
  bcounts: number[] = [];
  feedbackdatafromservice : any;

  ngOnInit(): void {

    this.commondata.loadData().subscribe((res)=>{
      console.log('FEEDBACK ' + this.feedbackData);
      this.feedbackData = this.commondata.categorizeFeedbacks(this.commondata.userwithfeedbacks); 
      this.totalusers = this.commondata.getTotalUniqueUsers(this.commondata.userwithfeedbacks);
      this.last30= this.commondata.getUsersRegisteredCountInLast30Days(this.commondata.userwithfeedbacks);
      this.usermonthly= this.commondata.getUsersCountByMonth(this.commondata.userwithfeedbacks);

      this.processFeedbackData();
      this.calculateSum();
      // Call this after receiving the data
      this.config4 = {
        type: 'bar',
        data: {
          labels: this.months,

          datasets: [
            {
              label: 'Positive Feedback',
              backgroundColor: '#365CF5',
              borderColor: 'transparent',
              borderRadius: 20,
              borderWidth: 5,
              barThickness: 20,
              maxBarThickness: 20,
              data: this.positiveCounts,
            },
            {
              label: 'Negative Feedback',
              backgroundColor: '#d50100',
              borderColor: 'transparent',
              borderRadius: 20,
              borderWidth: 5,
              barThickness: 20,
              maxBarThickness: 20,
              data: this.negativeCounts,
            },
          ],
        },
      };
      this.chart4 = new Chart('Chart4', this.config4);

      console.log('FIRST CHART DATA ' + this.usermonthly[0].month);

      for (let i = 0; i < this.usermonthly.length; i++) {
        this.months1.push(this.usermonthly[i].month); // Push the month to the months array
        this.counts.push(this.usermonthly[i].count); // Push the count to the counts array
      }

      this.config = {
        type: 'line',
        data: {
          labels: this.months1,
          datasets: [
            {
              label: 'Increase in Website Usage (Number of Users)',
              backgroundColor: '#365CF5',
              borderColor: '#365CF5',
              data: this.chardata1,
              pointBackgroundColor: 'transparent',
              pointHoverBackgroundColor: '#365CF5',
              pointBorderColor: 'transparent',
              pointHoverBorderColor: '#fff',
              pointHoverBorderWidth: 5,
              borderWidth: 5,
              pointRadius: 8,
              pointHoverRadius: 8,
              cubicInterpolationMode: 'monotone', // Add this line for curved line
            },
          ],
        },
      };
      this.chart = new Chart('Chart1', this.config);

      
this.showroomcount= this.commondata.getUniqueCenterCount(this.commondata.maindata);
this.slotusermonthly = this.commondata.getUsersSlotCountByMonth(this.commondata.maindata);
console.log(this.slotusermonthly);

for (let i = 0; i < this.slotusermonthly.length; i++) {
  this.slotmonths.push(this.slotusermonthly[i].month); // Push the month to the months array
  this.slotcounts.push(this.slotusermonthly[i].count); // Push the count to the counts array
}
this.config2 = {
  type: 'bar',
  data: {
    labels: this.slotmonths,
    datasets: [
      {
        label: 'Users (Number) ',
        backgroundColor: '#365CF5',
        borderRadius: 30,
        barThickness: 6,
        maxBarThickness: 8,
        data: this.slotcounts,
      },
    ],
  },
};
this.chart2 = new Chart('Chart2', this.config2);

this.brandsdata = this.commondata.getCenterAnalysis(this.commondata.maindata);
for (let i = 0; i < this.brandsdata.length; i++) {
  this.brands.push(this.brandsdata[i].centerName); // Push the month to the months array
  this.bcounts.push(this.brandsdata[i].totalBookings);
  // Push the count to the counts array
}
console.log('DATA COUNTS: ', this.bcounts);
console.log('DATA BRANDS: ', this.brands);
console.log(this.bcounts[0], this.bcounts[1], this.bcounts[2]);
this.config3 = {
  type: 'pie', // Pie chart type
  data: {
    labels: this.brands, // Labels
    datasets: [
      {
        label: 'Car Bookings',
        data: this.bcounts, // Sample data
        backgroundColor: ['#365CF5', '#9b51e0','#365CF5', '#9b51e0', '#4CAF50'],
        hoverBackgroundColor: ['#2A46B1', '#7F37A8','#2A46B1', '#7F37A8', '#388E3C'],
        borderWidth: 5,
        borderColor: '#ffffff',
      },
    ],
  },
  options: {
    responsive: false, // Responsive chart
    maintainAspectRatio: false, // Allow resizing
  },
};
this.chart3 = new Chart('Chart3', this.config3);
    });
    // this.http
    //   .get('http://localhost:8080/feedback/feedbackcount')
    //   .subscribe((res) => {

    //     this.feedbackData = res; // Assuming response has the required structure
    //     console.log('FEEDBACK ' + this.feedbackData);

    //     this.processFeedbackData();
    //     this.calculateSum();
    //     // Call this after receiving the data
    //     this.config4 = {
    //       type: 'bar',
    //       data: {
    //         labels: this.months,

    //         datasets: [
    //           {
    //             label: 'Positive Feedback',
    //             backgroundColor: '#365CF5',
    //             borderColor: 'transparent',
    //             borderRadius: 20,
    //             borderWidth: 5,
    //             barThickness: 20,
    //             maxBarThickness: 20,
    //             data: this.positiveCounts,
    //           },
    //           {
    //             label: 'Negative Feedback',
    //             backgroundColor: '#d50100',
    //             borderColor: 'transparent',
    //             borderRadius: 20,
    //             borderWidth: 5,
    //             barThickness: 20,
    //             maxBarThickness: 20,
    //             data: this.negativeCounts,
    //           },
    //         ],
    //       },
    //     };
    //     this.chart4 = new Chart('Chart4', this.config4);
    //   });

    // this.http.get('http://localhost:8080/user/totaluser').subscribe((res) => {
    //   console.log(res);
    //   this.totalusers = res;
    //   console.log(this.totalusers);
    // });
    // this.http
    //   .get('http://localhost:8080/showrooms/showroomcount')
    //   .subscribe((res) => {
    //     console.log(res);
    //     this.showroomcount = res;
    //   });
    // this.http.get('http://localhost:8080/user/last30').subscribe((res) => {
    //   console.log(res);
    //   this.last30 = res;
    // });

//     this.commondata.loadData()
// .subscribe((res) => {
//       console.log(res);

// this.showroomcount= this.commondata.getUniqueCenterCount(this.commondata.maindata);
//       this.slotusermonthly = this.commondata.getUsersSlotCountByMonth(this.commondata.maindata);
//       console.log(this.slotusermonthly);

//       for (let i = 0; i < this.slotusermonthly.length; i++) {
//         this.slotmonths.push(this.slotusermonthly[i].month); // Push the month to the months array
//         this.slotcounts.push(this.slotusermonthly[i].count); // Push the count to the counts array
//       }
//       this.config2 = {
//         type: 'bar',
//         data: {
//           labels: this.slotmonths,
//           datasets: [
//             {
//               label: 'Users (Number) ',
//               backgroundColor: '#365CF5',
//               borderRadius: 30,
//               barThickness: 6,
//               maxBarThickness: 8,
//               data: this.slotcounts,
//             },
//           ],
//         },
//       };
//       this.chart2 = new Chart('Chart2', this.config2);

//       this.brandsdata = this.commondata.getCenterAnalysis(this.commondata.maindata);
//       for (let i = 0; i < this.brandsdata.length; i++) {
//         this.brands.push(this.brandsdata[i].centerName); // Push the month to the months array
//         this.bcounts.push(this.brandsdata[i].totalBookings);
//         // Push the count to the counts array
//       }
//       console.log('DATA COUNTS: ', this.bcounts);
//       console.log('DATA BRANDS: ', this.brands);
//       console.log(this.bcounts[0], this.bcounts[1], this.bcounts[2]);
//       this.config3 = {
//         type: 'pie', // Pie chart type
//         data: {
//           labels: this.brands, // Labels
//           datasets: [
//             {
//               label: 'Car Bookings',
//               data: this.bcounts, // Sample data
//               backgroundColor: ['#365CF5', '#9b51e0','#365CF5', '#9b51e0', '#4CAF50'],
//               hoverBackgroundColor: ['#2A46B1', '#7F37A8','#2A46B1', '#7F37A8', '#388E3C'],
//               borderWidth: 5,
//               borderColor: '#ffffff',
//             },
//           ],
//         },
//         options: {
//           responsive: false, // Responsive chart
//           maintainAspectRatio: false, // Allow resizing
//         },
//       };
//       this.chart3 = new Chart('Chart3', this.config3);
//     });
    
    // this.http
    // .get('http://localhost:8080/api/slot-bookings/brandCount')
    // .subscribe((res) => {
    //   console.log(res);
    //   this.brandsdata = res;
    //   for (let i = 0; i < this.brandsdata.length; i++) {
    //     this.brands.push(this.brandsdata[i].brand); // Push the month to the months array
    //     this.bcounts.push(this.brandsdata[i].totalUsers);
    //     // Push the count to the counts array
    //   }
    //   console.log('DATA COUNTS: ', this.bcounts);
    //   console.log('DATA BRANDS: ', this.brands);
    //   console.log(this.bcounts[0], this.bcounts[1], this.bcounts[2]);
    //   this.config3 = {
    //     type: 'pie', // Pie chart type
    //     data: {
    //       labels: ['Renault', 'Nissan', 'Mitsubishi'], // Labels
    //       datasets: [
    //         {
    //           label: 'Car Bookings',
    //           data: [this.bcounts[0], this.bcounts[1], this.bcounts[2]], // Sample data
    //           backgroundColor: ['#365CF5', '#9b51e0', '#4CAF50'],
    //           hoverBackgroundColor: ['#2A46B1', '#7F37A8', '#388E3C'],
    //           borderWidth: 5,
    //           borderColor: '#ffffff',
    //         },
    //       ],
    //     },
    //     options: {
    //       responsive: false, // Responsive chart
    //       maintainAspectRatio: false, // Allow resizing
    //     },
    //   };
    //   this.chart3 = new Chart('Chart3', this.config3);
    // });

    // this.http
    //   .get('http://localhost:8080/user/userMonthlyCount')
    //   .subscribe((res) => {
    //     console.log('FIRST CHART RESPONSE ' + res);

    //     this.usermonthly = res;
    //     console.log('FIRST CHART DATA ' + this.usermonthly[0].month);

    //     for (let i = 0; i < this.usermonthly.length; i++) {
    //       this.months1.push(this.usermonthly[i].month); // Push the month to the months array
    //       this.counts.push(this.usermonthly[i].count); // Push the count to the counts array
    //     }

    //     this.config = {
    //       type: 'line',
    //       data: {
    //         labels: this.months1,
    //         datasets: [
    //           {
    //             label: 'Increase in Website Usage (Number of Users)',
    //             backgroundColor: '#365CF5',
    //             borderColor: '#365CF5',
    //             data: this.chardata1,
    //             pointBackgroundColor: 'transparent',
    //             pointHoverBackgroundColor: '#365CF5',
    //             pointBorderColor: 'transparent',
    //             pointHoverBorderColor: '#fff',
    //             pointHoverBorderWidth: 5,
    //             borderWidth: 5,
    //             pointRadius: 8,
    //             pointHoverRadius: 8,
    //             cubicInterpolationMode: 'monotone', // Add this line for curved line
    //           },
    //         ],
    //       },
    //     };
    //     this.chart = new Chart('Chart1', this.config);
    //   });

    // this.http
    //   .get('http://localhost:8080/api/slot-bookings/userMonthlyCount')
    //   .subscribe((res) => {
    //     console.log('DATAAAAAAAAAAA');

    //     console.log(res);

    //     this.slotusermonthly = res;

    //     for (let i = 0; i < this.slotusermonthly.length; i++) {
    //       this.slotmonths.push(this.slotusermonthly[i].month); // Push the month to the months array
    //       this.slotcounts.push(this.slotusermonthly[i].count); // Push the count to the counts array
    //     }
    //     this.config2 = {
    //       type: 'bar',
    //       data: {
    //         labels: this.slotmonths,
    //         datasets: [
    //           {
    //             label: 'Users (Number) ',
    //             backgroundColor: '#365CF5',
    //             borderRadius: 30,
    //             barThickness: 6,
    //             maxBarThickness: 8,
    //             data: this.slotcounts,
    //           },
    //         ],
    //       },
    //     };
    //     this.chart2 = new Chart('Chart2', this.config2);
    //   });
    // this.processFeedbackData();
    // this.changeFeedbackYear();
    this.calculateSum();
    console.log(this.selectedYear);
  }

  feedbackData: any = [];
  months: string[] = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ];
  positiveCounts: number[] = [];
  negativeCounts: number[] = [];
  totalpositive = 0;
  totalnegative = 0;
  selectedYear: String = 'y2024';
  year: number = 2024;

  processFeedbackData(): void {
    console.log('INSIDE PROCESS FEEDBACKS');

    for (let i = 0; i < this.months.length; i++) {
      let month = this.months[i] + ' 2024';
      console.log('DATA ' + this.feedbackData[month]);

      let positive = 0;
      let negative = 0;

      // Check if feedback data exists for the given month
      if (this.feedbackData[month]) {
        positive = this.feedbackData[month].positive || 0;
        negative = this.feedbackData[month].negative || 0;
      }

      // Push the counts into the arrays
      this.positiveCounts.push(positive);
      this.negativeCounts.push(negative);
    }
    console.log(
      'positive and negative ' + this.positiveCounts[0] + this.negativeCounts[0]
    );
  }

  // changeFeedbackYear() {
  //    let year1 = this.selectedYear === "y2024" ? 2024 : 2025;
  //   this.processFeedbackData(year1);
  //   // this.calculateSum();
  //   console.log("CHART UPDATION"+year1);
  //   this.chart4.update();
  // }

  calculateSum() {
    this.totalpositive = this.positiveCounts.reduce(
      (sum, current) => sum + current,
      0
    );
    this.totalnegative = this.negativeCounts.reduce(
      (sum, current) => sum + current,
      0
    );
    this.usersatisfaction = (
      (this.totalpositive * 100) /
      (this.totalnegative + this.totalpositive)
    ).toFixed(2);
    console.log(this.usersatisfaction);
  }

  chart: any;
  chart2: any;
  chart3: any;
  chart4: any;
  chart4data: any;
  chardata1: any = this.counts;
  usersatisfaction: any;
}

















package com.project.myRNM.Service;

import com.project.myRNM.Models.Entity.Contact;
import com.project.myRNM.Repository.ContactRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ContactService {


    @Autowired
    ContactRepo contactRepo;

    public Contact post(Contact contactModel)  {

        return contactRepo.save(contactModel);
    }

    public List<Contact> getcontact() {
        return contactRepo.findAll();
    }

    public Contact updateStatus(Integer messageid) {
        Optional<Contact> selectedcontact = contactRepo.findById(messageid);
        if (selectedcontact.isPresent()) {
        Contact updatecontact = selectedcontact.get();
        updatecontact.setStatus(true);
        return contactRepo.save(updatecontact);
    }
        return null;
    }
}

















    private Boolean status;






package com.project.myRNM.Controller;

import com.project.myRNM.Models.DTOs.BrandCountDTO;
import com.project.myRNM.Models.DTOs.SlotBookingDTO;
import com.project.myRNM.Models.Entity.Center;
import com.project.myRNM.Models.Entity.SlotBooking;
import com.project.myRNM.Repository.CenterRepository;
import com.project.myRNM.Repository.SlotBookingRepository;
import com.project.myRNM.Models.Response.GeneralResponse;
import com.project.myRNM.Service.CenterService;
import com.project.myRNM.Service.SlotBookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api/slot-bookings")
public class SlotBookingController {

    @Autowired
    private SlotBookingService slotBookingService;

    @Autowired
    private CenterRepository centerRepository;

    @Autowired
    private SlotBookingRepository slotBookingRepository;


    @PostMapping
    public ResponseEntity<?> saveSlotBooking(@RequestBody SlotBooking slotBooking) {
        try {
            SlotBooking savedSlotBooking = slotBookingService.bookSlot(slotBooking);

            // here, for response message I have surpassing the updatedd available slots for booking further bookings.
            int availableSlots = switch (slotBooking.getTimeSlot().toLowerCase()) {
                case "morning" -> savedSlotBooking.getCenter().getMorningSlots();
                case "afternoon" -> savedSlotBooking.getCenter().getAfternoonSlots();
                case "evening" -> savedSlotBooking.getCenter().getEveningSlots();
                default -> 0;
            };

            return ResponseEntity.ok(new GeneralResponse("Slot booked successfully. Available slots for " +
                    slotBooking.getTimeSlot() + ": " + availableSlots));

        }
        catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(new GeneralResponse("Internal Server Error: " + e.getMessage()));
        }
    }


    @GetMapping
    public ResponseEntity<?> getAllBookings() {
        List<SlotBooking> bookings = slotBookingService.getAllBookings();
        return ResponseEntity.ok(bookings);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getBookingsByEmail(@PathVariable Long id) {
        SlotBooking booking = slotBookingService.getBookingByEmail(id);
        if (booking == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(booking);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteBooking(@PathVariable Long id) {
        slotBookingService.deleteBooking(id);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/delete-all")
    public ResponseEntity<?> deleteAllBookings() {
        try {
            slotBookingService.deleteAllBookings();
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            return ResponseEntity.status(500).body(new GeneralResponse("Error deleting all bookings: " + e.getMessage()));
        }
    }


    @GetMapping("/userMonthlyCount")
    public ResponseEntity<?> getMonthlyUserCount() {
        try {
            return ResponseEntity.ok(slotBookingService.getMonthlyUserCounts());
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(new GeneralResponse(e.getMessage()));
        }
    }

    @GetMapping("/brandCount")
    public ResponseEntity<?> getUserCountByBrand() {
        try {
            return ResponseEntity.ok(slotBookingService.getCountByBrand());
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(new GeneralResponse(e.getMessage()));
        }
    }
    @PostMapping("/updatestatus")
    public ResponseEntity<?> updateUserStatus(@RequestBody SlotBookingDTO slotBookingDTO){
        try{
            slotBookingService.updateStatus(slotBookingDTO);
            return ResponseEntity.ok(new GeneralResponse("SUCCESSFULLY UPDATED !!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(new GeneralResponse(e.getMessage()));
        }
    }
}







    @PostMapping("/changestatus")
    public Contact updateStatus(@RequestBody Integer messageid) {
        return contactService.updateStatus(messageid);
    }
}







import { Component } from '@angular/core';
import { ComponentOptions } from './../../node_modules/@types/bootstrap/js/dist/base-component.d';
import { Routes } from '@angular/router';
import { ServiceListComponent } from './service-list/service-list.component';
import { HomeComponent } from './home/home.component';
import { LocationComponent } from './location/location.component';
import { ContactComponent } from './contact/contact.component';
import { BookingComponent } from './booking/booking.component';
import { LoginComponent } from './login/login.component';
import { SignupComponent } from './signup/signup.component';
import { FeedbackComponent } from './feedback/feedback.component';
import { CarSelectionComponent } from './car-selection/car-selection.component';
import { AdminDashbaordComponent } from './admin-dashbaord/admin-dashbaord.component';
import { UsersComponent } from './users/users.component';
import { UserFeedbackComponent } from './user-feedback/user-feedback.component';
import { ShowroomsComponent } from './showrooms/showrooms.component';
import { AdminSettingsComponent } from './admin-settings/admin-settings.component';
import { NotificationsComponent } from './notifications/notifications.component';
import { QueryComponent } from './query/query.component';
import { BookingsComponent } from './bookings/bookings.component';
import { NewsComponent } from './news/news.component';

export const routes: Routes = [
  { path: 'contact', component: ContactComponent }, // This will display the Contact component for '/contact'
  { path: 'location', component: LocationComponent },
  { path: '', component: HomeComponent, pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'signup', component: SignupComponent },
  { path: 'feedback', component: FeedbackComponent },
  { path: 'booking', component: BookingComponent },
  { path: 'car-selection-page', component: CarSelectionComponent },
  { path: 'home', component: HomeComponent },
  { path: 'userbookings', component: BookingsComponent },
  { path: 'users', component: UsersComponent },
  { path: 'userfeedback', component: UserFeedbackComponent },
  { path: 'showrooms', component: ShowroomsComponent },
  { path: 'settings', component: AdminSettingsComponent },
  { path: 'notifications', component: NotificationsComponent },
  { path: 'dashboard', component: AdminDashbaordComponent },
  { path: 'contact-query', component: QueryComponent },
  { path: 'news', component: NewsComponent },
];






<app-header></app-header>
<section class="home" id="home">
  <div class="video-contanier">
    <div
      id="carouselExampleIndicators"
      class="carousel slide"
      data-ride="carousel"
    >
      <ol class="carousel-indicators">
        <li
          data-target="#carouselExampleIndicators"
          data-slide-to="0"
          class="active"
        ></li>
        <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
        <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
      </ol>
      <div class="carousel-inner">
        <div class="carousel-item active">
          <video class="d-block w-100" autoplay muted loop>
            <source src="renault_video1.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <div class="carousel-caption d-none d-md-block">
            <h3>Renault Duster: The Adventure Begins Here</h3>
              <h5>
                With bold performance, spacious interiors, and unbeatable reliability, the Renault Duster is built to take on any road, any journey. Ready to explore more?            </h5>
                <br><br><br><br>
          </div>
        </div>
        <div class="carousel-item">
          <video class="d-block w-100" autoplay muted loop>
            <source src="nissan.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <div class="carousel-caption d-none d-md-block">
            <h3>Nissan Magnite: Big on Style, Compact in Size</h3>
            <h5>
              Designed to stand out with bold looks, packed with smart features, and offering a thrilling drive. The Nissan Magnite is the perfect companion for those who crave adventure in a compact package
            </h5>
            <br><br><br><br>
          </div>
        </div>
        <div class="carousel-item">
          <video class="d-block w-100" autoplay muted loop>
            <source src="mits.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <div class="carousel-caption d-none d-md-block">
            <h3>Mitsubishi XForce: Unleash Your Boldness</h3>
            <h5>
              With striking design, powerful performance, and rugged versatility, the Mitsubishi XForce is built to take you beyond the ordinary. Ready for your next big adventure?
            </h5>
            <br><br><br><br>
          </div>
        </div>
      </div>
      <a
        class="carousel-control-prev"
        href="#carouselExampleIndicators"
        role="button"
        data-slide="prev"
      >
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
      </a>
      <a
        class="carousel-control-next"
        href="#carouselExampleIndicators"
        role="button"
        data-slide="next"
      >
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
      </a>
    </div>
  </div>
</section>
<!-- <section class="home" id="home">
  <div class="video-container">
    <video class="d-block w-100" autoplay muted loop>
      <source src="renault_video1.mp4" type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  </div>
</section> -->

<app-booking></app-booking>
<app-service-list></app-service-list>
<app-testimonial></app-testimonial>
<app-contact></app-contact>
<app-news></app-news>
<app-feedback></app-feedback>
<app-logo></app-logo>

<app-footer></app-footer>





.home {
  position: relative;
  background-color: black;
  width: 100%;
  height: 100vh; 
  margin: 0; /* Remove any margin that might add white space */
  padding: 0; /* Remove any padding */
  overflow: hidden; /* Hide overflow to ensure the video fits */
}

/* Make the video container responsive and reduce height */
.video-container {
  background-color: black;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; /* Make the video take up the full height of the home section */
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden; /* Hide overflow to ensure the video fills the container */
}






<div class="footer">
  <div class="container">
    <div class="row footer-row">
      <div class="footer-col">
        <h5>MyRNM</h5>
        <p>Mahindhra World City, Chengalpattu, Chennai, India</p>
        <p>Phone: 9632587415</p>
        <p>Email: myrnmsupport&#64;gmail.com</p>
      </div>

      <div class="footer-col">
        <h5>Quick Links</h5>
        <ul class="footer-links">
          <li><a href="#">Home</a></li>
          <li><a href="#booking">Booking</a></li>
          <li><a href="#service-list">Services</a></li>
          <li><a href="#contact">Contact</a></li>
        </ul>
      </div>
      <div class="footer-col">
        <h5>Services</h5>
        <ul class="footer-links">
          <li><a href="#booking">Schedule a Test Drive</a></li>
          <li><a href="#service-list">24x7 Assistance</a></li>
          <li><a href="#service-list">Value Care</a></li>
        </ul>
      </div>
      <div class="footer-col">
        <h5>Useful Links</h5>
        <ul class="footer-links">
          <li><a href="https://rntbci.in/">RNTBCI</a></li>
          <li><a href="https://www.renault.co.in/">Renault India</a></li>
          <li><a href="https://www.nissan.in/">Nissan India</a></li>
          <li>
            <a href="https://mitsubishielectric.in/">Mitsubishi Motors</a>
          </li>
        </ul>
      </div>

      <div class="footer-col">
        <div class="social-icons">
          <h4>Follow us</h4>
          <a href="#" class="social-icon"><i class="fab fa-facebook"></i></a>
          <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
          <a href="#" class="social-icon"><i class="fab fa-linkedin"></i></a>
        </div>
      </div>

      <div class="footer-bottom">
        <div class="container" id="Copyright">
          <div class="row">
            <div class="col-12 text-center">
              <p>&copy; {{ currentYear }} Company Name. All Rights Reserved.</p>
              <div>
                <a href="/privacy-policy" class="footer-link">Privacy Policy</a>
                |
                <a href="/terms-of-service" class="footer-link"
                  >Terms of Service</a
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
